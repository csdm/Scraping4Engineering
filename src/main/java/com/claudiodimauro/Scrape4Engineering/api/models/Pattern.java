package com.claudiodimauro.Scrape4Engineering.api.models;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import lombok.Getter;
import lombok.Setter;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Getter
@Setter
@Document(collection = "patterns")
@ApiModel(description = "It is that component from which it is possible to scrap a source.")
public class Pattern {

    @Id
    @ApiModelProperty(notes = "It is a name used to uniquely identify the pattern. It is used as Id on mongo. A pattern with the same name as an already present one will generate the update of the latter.")
    private String patternName;
    @ApiModelProperty(notes = "It is the address of the page from which information is to be obtained.")
    private String url;//id = website url
    @ApiModelProperty(notes = "It represents the central tag of the HTML DOM through which to isolate the information of interest.")
    private String tagForBody;
    @ApiModelProperty(notes = "Represents the tag to extract a local id (not generated by Mongo) with which to identify the entity found. There can be multiple entities with this same id.")
    private String entityId;
    @ApiModelProperty(notes = "Represents the tag to obtain the link to the searched resource.")
    private String entityPath;
    @ApiModelProperty(notes = "Represents the attribute, associated with the tag passed through entityId, thanks to which it is possible to extract the string that will do it from Id.")
    private String attrForEntityId;
    @ApiModelProperty(notes = "It is a Boolean variable which, if true, indicates that a prescraping must be performed as the desired information will be structured on multiple pages.")
    private Boolean hasPrescraping = false;
    @ApiModelProperty(notes = "It is the tag that is used to prescrap, only when hasPrescraping == true.")
    private String tagForPrescraping;
    @ApiModelProperty(notes = "It is a Boolean variable which, if true, indicates that the central content to be extrapolated starting from the \"click\" on a link, that is, going to detect it from another page.")
    private Boolean haveToExplore = false;
    @ApiModelProperty(notes = "It is a list containing a set of PatternObjects and is used to extract the \"external\" elements, ie those in the page pointed to by the base link.")
    private List<PatternObject> patternObjects;
    @ApiModelProperty(notes = "It is a list containing a set of PatternObjects and is used to extract the \"internal\" elements, ie those in the internal page starting from the entity.")
    private List<PatternObject> innerPatternObjects;
    @ApiModelProperty(notes = "Represents the central tag of the HTML DOM through which to isolate the information of interest in the internal page linked by the entity.")
    private String tagForInnerBody;
    @ApiModelProperty(notes = "It is a Boolean variable which, if true, indicates the presence of attachments to be extrapolated.")
    private Boolean hasAttachments = false;
    @ApiModelProperty(notes = "It is a list containing a set of AttachmentObject and is used to extract the \"external\" attachments, ie those in the page pointed to by the base link.")
    private List<AttachmentObject> attachmentObject;
    @ApiModelProperty(notes = "It is a Boolean variable which, if true, indicates the presence of attachments to be extrapolated on a page inside the click of a link.")
    private Boolean hasInnerAttachments = false;
    @ApiModelProperty(notes = "It is a list containing a set of AttachmentObject and is used to extract the \"internal\" attachments, ie those in the internal page starting from the entity.")
    private List<AttachmentObject> attachmentInnerObject;
    
    public Pattern() {
        this.patternObjects = new ArrayList<>();
        this.innerPatternObjects = new ArrayList<>();
        this.attachmentObject = new ArrayList<>();
        this.attachmentInnerObject = new ArrayList<>();
    }
}
